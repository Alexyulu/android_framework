apply plugin: 'com.android.application'
apply plugin: 'dexknifePlus'

def lib = rootProject.ext
def config = lib.androidConfig

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        applicationId config.applicationId
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName
        multiDexEnabled true
    }

    buildTypes {
        debug {
            buildConfigField 'String', 'URL', '"http://192.168.1.193:10092/"'
            //applicationIdSuffix ".debug"
            minifyEnabled false
            //manifestPlaceholders = [APP_LABEL    : "master大师"]
        }

        release {
            //不显示log//编译级别控制
            buildConfigField("boolean", "LOG_ERROR", "false")
            buildConfigField 'String', 'URL', '"http://192.168.1.193:10092/"'
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // // 在打正式包时是否对代码进行检查/编译发生错误是否停止编译
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dexKnife{
    //必选参数
    enabled true //if false,禁用分包插件
    //可选参数
    //1.如果没有可选参数，将根据enabled决定是否分包。
    //2.如果有可选参数，需满足必选参数和可选参数的条件才允许分包
    productFlavor 'mock'
    buildType 'debug'

    /*
    *eg:当前productFlavors = dev，buildType = debug，
    *参数组合1：enabled = true，productFlavor = dev，buildType = debug 分包
    *参数组合2：enabled = true，productFlavor = mock，buildType = debug 不分包
    *参数组合1：enabled = true，buildType = debug 所有buildType = debug分包
    *参数组合1：enabled = true，productFlavor = dev 所有productFlavor = dev分包
    * */
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation 'junit:junit:4.12'

    //base
    implementation lib.dependencies["appcompat-v7"]
    implementation lib.dependencies["design"]
    implementation lib.dependencies["recyclerview-v7"]
    implementation lib.dependencies["cardview-v7"]
    implementation lib.dependencies["multidex"]

    //rx
    implementation lib.dependencies["rxjava"]
    implementation lib.dependencies["rxandroid"]
    implementation lib.dependencies["rxpermissions"]
    implementation lib.dependencies["rxbinding"]
    implementation lib.dependencies["rxbinding-appcompat-v7"]
    implementation lib.dependencies["rxbinding-design"]

    //network
    implementation lib.dependencies["gson"]
    implementation lib.dependencies["glide"]
    implementation lib.dependencies["glide-okhttp3-integration"]
    annotationProcessor lib.dependencies["glideCompiler"]
    implementation lib.dependencies["retrofit"]
    implementation lib.dependencies["retrofit-converter-gson"]
    implementation lib.dependencies["retrofit-adapter-rxjava2"]
    implementation lib.dependencies["okhttp"]
    implementation lib.dependencies["okhttp-logging-interceptor"]

    //di
    implementation lib.dependencies["dagger"]
    annotationProcessor lib.dependencies["dagger-compiler"]
    implementation lib.dependencies["butterknife"]
    annotationProcessor lib.dependencies["butterknife-compiler"]

    //other
    //implementation lib.dependencies["logger"]
    implementation lib.dependencies["fragmentation"]
    implementation lib.dependencies["StatusBarUtil"]
    implementation lib.dependencies["countdownview"]
    implementation lib.dependencies["android-utils"]
}
